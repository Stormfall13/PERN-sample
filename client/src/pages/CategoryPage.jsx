import { useEffect, useState, useMemo } from "react";
import { useParams, Link } from "react-router-dom";
import { useDispatch, useSelector } from "react-redux";
import { fetchCategoryById } from "../store/slices/categorySlice";
import { fetchProductsByCategory } from "../store/slices/productsSlice";
import { fetchFavorites, toggleFavoriteLocally } from "../store/slices/favoriteSlice";
import { addToCart } from "../store/slices/cartSlice";
import { setInitialQuantities, increaseQuantity, decreaseQuantity, changeQuantity } from "../store/slices/quantitySlice";
import noPhoto from "../assets/no-photo.png";
import './categoryPage.css';
import HeaderMain from "../components/HeaderMain";

const CategoryPage = () => {
    const { id } = useParams();
    const dispatch = useDispatch();

    const category = useSelector(state => state.category.data);
    const products = useSelector(state => state.products.list);
    const favoriteIds = useSelector(state => state.favorites.ids);

    const quantities = useSelector(state => state.quantities);

    // üîπ –°–û–°–¢–û–Ø–ù–ò–Ø –î–õ–Ø –§–ò–õ–¨–¢–†–û–í
    const [minPrice, setMinPrice] = useState(0);
    const [maxPrice, setMaxPrice] = useState(0);
    const [selectedMinPrice, setSelectedMinPrice] = useState(0);
    const [selectedMaxPrice, setSelectedMaxPrice] = useState(0);
    const [selectedColors, setSelectedColors] = useState([]);
    const [selectedSizes, setSelectedSizes] = useState([]);
    const [showFilters, setShowFilters] = useState(true); 

    // üîπ –í–´–ß–ò–°–õ–Ø–ï–ú –î–ê–ù–ù–´–ï –î–õ–Ø –§–ò–õ–¨–¢–†–û–í
    const { allColors, allSizes, maxProductPrice } = useMemo(() => {
        if (!products.length) return { allColors: [], allSizes: [], maxProductPrice: 0 };

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞
        const colorsSet = new Set();
        products.forEach(product => {
            if (product.colors) {
                product.colors.forEach(color => colorsSet.add(color));
            }
        });

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        const sizesSet = new Set();
        products.forEach(product => {
            if (product.sizes) {
                product.sizes.forEach(size => sizesSet.add(size));
            }
        });

        // –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
        const maxPrice = Math.max(...products.map(p => p.price), 0);

        return {
            allColors: Array.from(colorsSet),
            allSizes: Array.from(sizesSet),
            maxProductPrice: maxPrice
        };
    }, [products]);

    // üîπ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –§–ò–õ–¨–¢–†–û–í –ü–†–ò –ó–ê–ì–†–£–ó–ö–ï –¢–û–í–ê–†–û–í
    useEffect(() => {
        if (maxProductPrice > 0) {
            setMinPrice(0);
            setMaxPrice(maxProductPrice);
            setSelectedMinPrice(0);
            setSelectedMaxPrice(maxProductPrice);
        }
    }, [maxProductPrice]);

    // üîπ –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –¢–û–í–ê–†–û–í
    const filteredProducts = useMemo(() => {
        return products.filter(product => {
            // –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ
            const priceMatch = product.price >= selectedMinPrice && product.price <= selectedMaxPrice;
            
            // –§–∏–ª—å—Ç—Ä –ø–æ —Ü–≤–µ—Ç–∞–º (–µ—Å–ª–∏ —Ü–≤–µ—Ç–∞ –≤—ã–±—Ä–∞–Ω—ã)
            const colorMatch = selectedColors.length === 0 || 
                (product.colors && product.colors.some(color => selectedColors.includes(color)));
            
            // –§–∏–ª—å—Ç—Ä –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º (–µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä—ã –≤—ã–±—Ä–∞–Ω—ã)
            const sizeMatch = selectedSizes.length === 0 || 
                (product.sizes && product.sizes.some(size => selectedSizes.includes(size)));
            
            return priceMatch && colorMatch && sizeMatch;
        });
    }, [products, selectedMinPrice, selectedMaxPrice, selectedColors, selectedSizes]);

    // üîπ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –§–ò–õ–¨–¢–†–û–í
    const handlePriceRangeChange = (e) => {
        const value = parseInt(e.target.value);
        setSelectedMaxPrice(value);
    };

    const handleMinPriceChange = (e) => {
        let value = parseInt(e.target.value) || 0;
        value = Math.max(0, Math.min(value, selectedMaxPrice));
        setSelectedMinPrice(value);
    };

    const handleMaxPriceChange = (e) => {
        let value = parseInt(e.target.value) || 0;
        value = Math.min(maxPrice, Math.max(value, selectedMinPrice));
        setSelectedMaxPrice(value);
    };

    const handleColorToggle = (color) => {
        setSelectedColors(prev => 
            prev.includes(color) 
                ? prev.filter(c => c !== color)
                : [...prev, color]
        );
    };

    const handleSizeToggle = (size) => {
        setSelectedSizes(prev => 
            prev.includes(size) 
                ? prev.filter(s => s !== size)
                : [...prev, size]
        );
    };

    const handleResetFilters = () => {
        setSelectedMinPrice(0);
        setSelectedMaxPrice(maxPrice);
        setSelectedColors([]);
        setSelectedSizes([]);
    };

    useEffect(() => {
        dispatch(fetchCategoryById(id));
        dispatch(fetchProductsByCategory(id)).then((res) => {
            const initialQuantities = {};
            res.payload.forEach(prod => {
                initialQuantities[prod.id] = 1;
            });
            dispatch(setInitialQuantities(initialQuantities));
        });

        const token = localStorage.getItem("token");
        if (token) dispatch(fetchFavorites());
    }, [id, dispatch]);

    const handleAddToCart = async (productId, stock) => {
        const quantity = quantities[productId] || 1;
        if (quantity > stock) {
            alert(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ. –í—Å–µ–≥–æ: ${stock}`);
            return;
        }
    
        dispatch(addToCart({ productId, quantity }))
            .unwrap()
            .then(() => {
                alert("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É");
            })
            .catch((err) => {
                alert(err);
            });
    };

    const handleIncrease = (id, stock) => {
        dispatch(increaseQuantity({ productId: id, stock }));
    };
    
    const handleDecrease = (id) => {
        dispatch(decreaseQuantity({ productId: id }));
    };
    
    const handleQuantityChange = (e, id, stock) => {
        const value = parseInt(e.target.value, 10);
        if (isNaN(value)) return;
        dispatch(changeQuantity({ productId: id, quantity: value, stock }));
    };

    
    const toggleFavorite = async (productId) => {
        const token = localStorage.getItem("token");
        if (!token) {
            alert("–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –Ω—É–∂–Ω–æ –≤–æ–π—Ç–∏");
            return;
        }

        const isFavorite = favoriteIds.includes(productId);

        try {
            const response = await fetch(
                `${process.env.REACT_APP_API_URL}/api/favorites/${isFavorite ? 'remove/' : 'add/'}${productId}`,
                {
                    method: isFavorite ? "DELETE" : "POST",
                    headers: {
                        "Content-Type": "application/json",
                        Authorization: `Bearer ${token}`,
                    },
                }
            );

            if (!response.ok) {
                const data = await response.json();
                throw new Error(data.message || "–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –∏–∑–±—Ä–∞–Ω–Ω—ã–º");
            }

            dispatch(toggleFavoriteLocally(productId));
        } catch (err) {
            alert(err.message);
        }
    };

    return (
        <>
        <HeaderMain />
        <h1>{category ? category.name : "–ó–∞–≥—Ä—É–∑–∫–∞..."}</h1>
        {/* {favoriteIds.length > 0 && (
            <div className="test" style={{ marginBottom: 20 }}>
                <Link to="/favorites">–ü–µ—Ä–µ–π—Ç–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ({favoriteIds.length})</Link>
            </div>
        )} */}
        <div className="category__wrapp" style={{ display: 'flex' }}>

            <div className="filter__wrapp">
                {/* üîπ –ö–ù–û–ü–ö–ê –ü–û–ö–ê–ó–ê–¢–¨/–°–ö–†–´–¢–¨ –§–ò–õ–¨–¢–†–´ (–¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö) */}
                {/* <button 
                    onClick={() => setShowFilters(!showFilters)}
                    style={{ 
                        marginBottom: '20px', 
                        padding: '10px 15px',
                        backgroundColor: '#007bff',
                        color: 'white',
                        border: 'none',
                        borderRadius: '5px',
                        cursor: 'pointer'
                    }}
                >
                    {showFilters ? '–°–∫—Ä—ã—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã' : '–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã'}
                </button> */}

                {/* üîπ –ü–ê–ù–ï–õ–¨ –§–ò–õ–¨–¢–†–û–í */}
                <div style={{ 
                    display: showFilters ? 'block' : 'none', 
                    background: '#bbb'
                }}>
                    <h3>–§–∏–ª—å—Ç—Ä—ã</h3>
                    
                    {/* üîπ –§–ò–õ–¨–¢–† –ü–û –¶–ï–ù–ï */}
                    <div style={{ marginBottom: '20px' }}>
                        <h4>–¶–µ–Ω–∞: –¥–æ {selectedMaxPrice} ‚ÇΩ</h4>
                        <input
                            type="range"
                            min={minPrice}
                            max={maxPrice}
                            value={selectedMaxPrice}
                            onChange={handlePriceRangeChange}
                            style={{ width: '100%', maxWidth: '300px' }}
                        />
                        <div style={{ display: 'flex', gap: '10px', marginTop: '10px' }}>
                            <div>
                                <label>–û—Ç: </label>
                                <input
                                    type="number"
                                    value={selectedMinPrice}
                                    onChange={handleMinPriceChange}
                                    min={0}
                                    max={selectedMaxPrice}
                                    style={{ width: '80px', padding: '5px' }}
                                />
                            </div>
                            <div>
                                <label>–î–æ: </label>
                                <input
                                    type="number"
                                    value={selectedMaxPrice}
                                    onChange={handleMaxPriceChange}
                                    min={selectedMinPrice}
                                    max={maxPrice}
                                    style={{ width: '80px', padding: '5px' }}
                                />
                            </div>
                        </div>
                    </div>

                    {/* üîπ –§–ò–õ–¨–¢–† –ü–û –¶–í–ï–¢–ê–ú */}
                    {allColors.length > 0 && (
                        <div style={{ marginBottom: '20px' }}>
                            <h4>–¶–≤–µ—Ç–∞</h4>
                            <div style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>
                                {allColors.map(color => (
                                    <label key={color} style={{ display: 'flex', alignItems: 'center', cursor: 'pointer' }}>
                                        <input
                                            type="checkbox"
                                            checked={selectedColors.includes(color)}
                                            onChange={() => handleColorToggle(color)}
                                            style={{ marginRight: '5px' }}
                                        />
                                        <div 
                                            style={{
                                                width: '20px',
                                                height: '20px',
                                                borderRadius: '50%',
                                                backgroundColor: color,
                                                border: '1px solid #ccc'
                                            }}
                                            title={color}
                                        />
                                    </label>
                                ))}
                            </div>
                        </div>
                    )}

                    {/* üîπ –§–ò–õ–¨–¢–† –ü–û –†–ê–ó–ú–ï–†–ê–ú */}
                    {allSizes.length > 0 && (
                        <div style={{ marginBottom: '20px' }}>
                            <h4>–†–∞–∑–º–µ—Ä—ã</h4>
                            <div style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>
                                {allSizes.map(size => (
                                    <label key={size} style={{ display: 'flex', alignItems: 'center', cursor: 'pointer' }}>
                                        <input
                                            type="checkbox"
                                            checked={selectedSizes.includes(size)}
                                            onChange={() => handleSizeToggle(size)}
                                            style={{ marginRight: '5px' }}
                                        />
                                        {size}
                                    </label>
                                ))}
                            </div>
                        </div>
                    )}

                    {/* üîπ –ö–ù–û–ü–ö–ê –°–ë–†–û–°–ê */}
                    <button 
                        onClick={handleResetFilters}
                        style={{
                            padding: '8px 15px',
                            backgroundColor: '#ff4444',
                            color: 'white',
                            border: 'none',
                            borderRadius: '5px',
                            cursor: 'pointer'
                        }}
                    >
                        –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
                    </button>

                    {/* üîπ –°–ß–ï–¢–ß–ò–ö –ù–ê–ô–î–ï–ù–ù–´–• –¢–û–í–ê–†–û–í */}
                    <p style={{ marginTop: '10px', fontWeight: 'bold' }}>
                        –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {filteredProducts.length}
                    </p>
                    {/* üîπ –°–û–û–ë–©–ï–ù–ò–ï –ï–°–õ–ò –¢–û–í–ê–†–´ –ù–ï –ù–ê–ô–î–ï–ù–´ */}
                    {filteredProducts.length === 0 && products.length > 0 && (
                        <div style={{ textAlign: 'center', padding: '40px' }}>
                            <h3>–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                            <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞</p>
                            <button onClick={handleResetFilters}>–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã</button>
                        </div>
                    )}
                </div>


            </div>
            {filteredProducts.length === 0 ? (
                <div className="wrapp__prod" style={{ display: "flex", flexWrap: "wrap", maxWidth: 1024 + 'px', width: 100 + '%' }}>
                    {products.map((product) => (
                        <div key={product.id} className="wrapper__prod" style={{ maxWidth: "300px", width: "100%" }}>
                            <Link to={`/product/${product.id}`} style={{ textDecoration: "none", color: "inherit" }}>
                                <h3>{product.nameProd}</h3>
                                <p>–¶–µ–Ω–∞: {product.price} $</p>
                                <div style={{ height: "200px", display: "flex", justifyContent: "center", marginBottom: "10px" }}>
                                    <img
                                        src={
                                            product.images && product.images.length > 0 
                                                ? `${process.env.REACT_APP_API_URL}${product.images[0]}`
                                                : noPhoto
                                        }
                                        alt={product.nameProd}
                                        style={{ 
                                            maxWidth: "100%", 
                                            maxHeight: "100%", 
                                            objectFit: "contain" 
                                        }}
                                    />
                                </div>
                                <div>{product.isHit ? '–•–∏—Ç' : ''}</div>
                                <div>{product.isNew ? '–ù–æ–≤–∏–Ω–∫–∞' : ''}</div>
                                <div>{product.isSale ? '–ê–∫—Ü–∏—è' : ''}</div>
                                <p>–ù–∞ —Å–∫–ª–∞–¥–µ: {product.stock}</p>
                                {/* –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å */}
                                {product.sizes && product.sizes.length > 0 && (
                                <div style={{ marginBottom: "10px" }}>
                                    <p style={{ marginBottom: "5px", fontWeight: "bold" }}>–†–∞–∑–º–µ—Ä—ã:</p>
                                    <div style={{ display: "flex", gap: "5px", flexWrap: "wrap" }}>
                                        {product.sizes.map((size, index) => (
                                            <span 
                                                key={index} 
                                                style={{
                                                    padding: "3px 8px",
                                                    background: "#f0f0f0",
                                                    borderRadius: "4px",
                                                    fontSize: "14px"
                                                }}
                                            >
                                                {size}
                                            </span>
                                        ))}
                                    </div>
                                </div>
                            )}
                            {/* –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ü–≤–µ—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å */}
                            {product.colors && product.colors.length > 0 && (
                                <div style={{ marginBottom: "10px" }}>
                                    <p style={{ marginBottom: "5px", fontWeight: "bold" }}>–¶–≤–µ—Ç–∞:</p>
                                    <div style={{ display: "flex", gap: "5px", flexWrap: "wrap" }}>
                                        {product.colors.map((color, index) => (
                                            <div 
                                                key={index}
                                                style={{
                                                    width: "20px",
                                                    height: "20px",
                                                    borderRadius: "50%",
                                                    background: color,
                                                    border: "1px solid #ddd"
                                                }}
                                                title={color}
                                            />
                                        ))}
                                    </div>
                                </div>
                            )}
                            </Link>
                            <Link className='prod__brand' to={`/brand/${product.brand}`}>{product.brand}</Link>
                            <div style={{ display: "flex", alignItems: "center", gap: "10px" }}>
                                <button onClick={() => handleDecrease(product.id)}>-</button>
                                <input
                                type="text"
                                value={quantities[product.id] || 1}
                                onChange={(e) => handleQuantityChange(e, product.id, product.stock)}
                                style={{ width: 50 }}
                                />

                                <button onClick={() => handleIncrease(product.id, product.stock)}>+</button>
                            </div>

                            <button onClick={() => toggleFavorite(product.id)}>
                                {favoriteIds.includes(product.id) ? "‚òÖ –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º" : "‚òÜ –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"}
                            </button>

                            <button onClick={() => handleAddToCart(product.id, product.stock)}>–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É</button>
                        </div>
                    ))}
                </div>
            ) : (
                // üîπ –û–¢–û–ë–†–ê–ñ–ê–ï–ú –û–¢–§–ò–õ–¨–¢–†–û–í–ê–ù–ù–´–ï –¢–û–í–ê–†–´
                <div className="wrapp__prod" style={{ display: "flex", flexWrap: "wrap", maxWidth: 1024 + 'px', width: 100 + '%' }}>
                    {filteredProducts.map((product) => (
                        <div key={product.id} className="wrapper__prod" style={{ maxWidth: "300px", width: "100%" }}>
                            <Link to={`/product/${product.id}`} style={{ textDecoration: "none", color: "inherit" }}>
                                <h3>{product.nameProd}</h3>
                                <p>–¶–µ–Ω–∞: {product.price} $</p>
                                <div style={{ height: "200px", display: "flex", justifyContent: "center", marginBottom: "10px" }}>
                                    <img
                                        src={
                                            product.images && product.images.length > 0 
                                                ? `${process.env.REACT_APP_API_URL}${product.images[0]}`
                                                : noPhoto
                                        }
                                        alt={product.nameProd}
                                        style={{ 
                                            maxWidth: "100%", 
                                            maxHeight: "100%", 
                                            objectFit: "contain" 
                                        }}
                                    />
                                </div>
                                <div>{product.isHit ? '–•–∏—Ç' : ''}</div>
                                <div>{product.isNew ? '–ù–æ–≤–∏–Ω–∫–∞' : ''}</div>
                                <div>{product.isSale ? '–ê–∫—Ü–∏—è' : ''}</div>
                                <p>–ù–∞ —Å–∫–ª–∞–¥–µ: {product.stock}</p>
                                {/* –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å */}
                                {product.sizes && product.sizes.length > 0 && (
                                <div style={{ marginBottom: "10px" }}>
                                    <p style={{ marginBottom: "5px", fontWeight: "bold" }}>–†–∞–∑–º–µ—Ä—ã:</p>
                                    <div style={{ display: "flex", gap: "5px", flexWrap: "wrap" }}>
                                        {product.sizes.map((size, index) => (
                                            <span 
                                                key={index} 
                                                style={{
                                                    padding: "3px 8px",
                                                    background: "#f0f0f0",
                                                    borderRadius: "4px",
                                                    fontSize: "14px"
                                                }}
                                            >
                                                {size}
                                            </span>
                                        ))}
                                    </div>
                                </div>
                            )}
                            {/* –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ü–≤–µ—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å */}
                            {product.colors && product.colors.length > 0 && (
                                <div style={{ marginBottom: "10px" }}>
                                    <p style={{ marginBottom: "5px", fontWeight: "bold" }}>–¶–≤–µ—Ç–∞:</p>
                                    <div style={{ display: "flex", gap: "5px", flexWrap: "wrap" }}>
                                        {product.colors.map((color, index) => (
                                            <div 
                                                key={index}
                                                style={{
                                                    width: "20px",
                                                    height: "20px",
                                                    borderRadius: "50%",
                                                    background: color,
                                                    border: "1px solid #ddd"
                                                }}
                                                title={color}
                                            />
                                        ))}
                                    </div>
                                </div>
                            )}
                            </Link>
                            <Link className='prod__brand' to={`/brand/${product.brand}`}>{product.brand}</Link>
                            <div style={{ display: "flex", alignItems: "center", gap: "10px" }}>
                                <button onClick={() => handleDecrease(product.id)}>-</button>
                                <input
                                type="text"
                                value={quantities[product.id] || 1}
                                onChange={(e) => handleQuantityChange(e, product.id, product.stock)}
                                style={{ width: 50 }}
                                />

                                <button onClick={() => handleIncrease(product.id, product.stock)}>+</button>
                            </div>

                            <button onClick={() => toggleFavorite(product.id)}>
                                {favoriteIds.includes(product.id) ? "‚òÖ –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º" : "‚òÜ –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"}
                            </button>

                            <button onClick={() => handleAddToCart(product.id, product.stock)}>–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É</button>
                        </div>
                    ))}
                </div>
            )}
        </div>
        </>
    );
};

export default CategoryPage;